apiVersion: karpenter.sh/v1
kind: NodePool
metadata:
  name: default
  # Labels are arbitrary key-values that are applied to all nodes
  labels:
    karpenter.nodepool: default
  # Annotations are arbitrary key-values that are applied to all nodes
  annotations:
    karpenter.nodepool: default
spec:
  template:
    spec:
      startupTaints:
      - key: node.cilium.io/agent-not-ready
        value: "true"
        effect: NoExecute
      nodeClassRef:
        group: karpenter.k8s.aws
        kind: EC2NodeClass
        name: default
      requirements:
        - key: kubernetes.io/arch
          operator: In
          values: ["amd64"]
        - key: kubernetes.io/os
          operator: In
          values: ["linux"]
        - key: karpenter.sh/capacity-type
          operator: In
          values: ["on-demand"]
        - key: karpenter.k8s.aws/instance-category
          operator: In
          values: ["c", "m", "r"]
        - key: karpenter.k8s.aws/instance-generation
          operator: Gt
          values: ["2"]
        - key: "topology.kubernetes.io/zone"
          operator: In
          values: ${availability_zones}
      expireAfter: 720h # 30 * 24h = 720h
  disruption:
    consolidationPolicy: WhenEmpty
    consolidateAfter: 30s
    expireAfter: 2h
  # This allows Karpenter to consider nodes with only Cilium pods as "empty"
  emptyNodeConsolidation:
    excludedPods:
      - namespace: kube-system
        labelSelector:
          matchExpressions:
            - key: k8s-app
              operator: In
              values: ["cilium"]

  limits:
    cpu: 1000